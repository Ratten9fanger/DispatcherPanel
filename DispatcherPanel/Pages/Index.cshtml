@page
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8" />
    <title>Панель диспетчера</title>
    <style>
        /* Базовые стили */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            transition: background-color 0.3s, color 0.3s;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        h1 {
            text-align: center;
            margin-bottom: 20px;
        }

        .theme-toggle {
            display: flex;
            justify-content: flex-end;
            margin-bottom: 20px;
        }

            .theme-toggle button {
                padding: 10px 20px;
                border: none;
                background-color: #007bff;
                color: white;
                border-radius: 4px;
                cursor: pointer;
                font-size: 16px;
            }

        .panels {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
        }

        .panel {
            flex: 1;
            min-width: 300px;
            background-color: #f9f9f9; /* Молочный цвет по умолчанию */
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            padding: 20px;
            transition: background-color 0.3s, color 0.3s;
        }

        .card {
            background-color: #ffffff;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            box-shadow: 0 1px 4px rgba(0,0,0,0.1);
        }

        .card-title {
            font-weight: bold;
            margin-bottom: 5px;
        }

        .map-container {
            height: 400px;
            border-radius: 12px;
            overflow: hidden;
        }

        /* Тема "Темная" */
        body.dark-theme {
            background-color: #121212;
            color: #f5f5f5;
        }

            body.dark-theme .panel {
                background-color: #1e1e1e;
            }

            body.dark-theme .card {
                background-color: #2c2c2c;
                color: #f5f5f5;
            }
    </style>
</head>

<body class="light-theme">
    <div class="container">
        <div class="theme-toggle">
            <button onclick="toggleTheme()">Переключить тему</button>
        </div>

        <h1>Панель диспетчера</h1>

        <div class="panels">

            <!-- Панель: Входящие заявки -->
            <div class="panel">
                <h2>Входящие заявки</h2>

                <!-- Заглушка: тестовые заявки (заменить на Model.ActiveRequests) -->
                @{
                    // TODO: Удалить после подключения модели
                    var activeRequests = new[]
                    {
                new { FullName = "Иван Петров", PhoneNumber = "+7 912 345-67-89", Address = "ул. Ленина, д. 10" },
                new { FullName = "Мария Смирнова", PhoneNumber = "+7 921 123-45-67", Address = "пр. Космонавтов, д. 15" },
                new { FullName = "Алексей Иванов", PhoneNumber = "+7 900 987-65-43", Address = "ул. Гоголя, д. 5" }
                };
                }

                @foreach (var req in activeRequests)
                {
                    <div class="card">
                        <div class="card-title">@req.FullName</div>
                        <div>@req.PhoneNumber</div>
                        <div>@req.Address</div>
                        <button class="btn btn-success">Отметить как обработано</button>
                    </div>
                }
            </div>

            <!-- Панель: Обработанные заявки -->
            <div class="panel">
                <h2>Обработанные заявки</h2>

                <!-- Заглушка: тестовые данные (заменить на Model.ProcessedRequests) -->
                @{
                    // TODO: Удалить после подключения модели
                    var processedRequests = new[]
                    {
                new { FullName = "Сергей Николаев", PhoneNumber = "+7 916 111-22-33", Address = "ул. Пушкина, д. 20" },
                new { FullName = "Екатерина Орлова", PhoneNumber = "+7 926 444-55-66", Address = "ул. Тверская, д. 5" }
                };
                }

                @foreach (var req in processedRequests)
                {
                    <div class="card">
                        <div class="card-title">@req.FullName</div>
                        <div>@req.PhoneNumber</div>
                        <div>@req.Address</div>
                    </div>
                }
            </div>

            <!-- Панель: Карта -->
            <div class="panel map-container">
                <h2>Карта</h2>
                <div id="map" style="width: 100%; height: 100%;"></div>
            </div>
        </div>
    </div>

    <!-- Google Maps API -->
    <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_GOOGLE_MAPS_API_KEY&callback=initMap" async defer></script>
    <script>
        let map;

        function initMap() {
            const center = { lat: 55.751, lng: 37.619 }; // Москва по умолчанию
            map = new google.maps.Map(document.getElementById("map"), {
                zoom: 10,
                center: center
            });

            // Тестовые метки для активных заявок
            // TODO: удалить и использовать данные из Model.ActiveRequests

            const testMarkers = [
                { name: "Иван Петров", lat: 55.751, lng: 37.619 },
                { name: "Мария Смирнова", lat: 55.755, lng: 37.625 },
                { name: "Алексей Иванов", lat: 55.760, lng: 37.630 }
            ];

            testMarkers.forEach(marker => {
                new google.maps.Marker({
                    position: { lat: marker.lat, lng: marker.lng },
                    map: map,
                    title: marker.name
                });
            });
        }

        function toggleTheme() {
            document.body.classList.toggle('dark-theme');
        }
    </script>
</body>
</html>